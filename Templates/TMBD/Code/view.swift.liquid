//
//  {{ module_info.file_name }}
//  {{ module_info.project_name }}
//
//  Created by {{ developer.name }} on {{ date }}.
//  Copyright © {{ year }} {{ developer.company }}. All rights reserved.
//

import UIKit
import CArch
import CArchSwinject

/// Протокол реализующий логику получения данных из слоя бизнес логики
@SyncAlias
protocol {{ module_info.name }}ProvisionLogic: RootProvisionLogic, ErrorAsyncHandler {}

/// Все взаимодействия пользователя с модулем
typealias {{ module_info.name }}UserInteraction = {{ module_info.name }}RendererUserInteraction // & <#SecondUserInteractionIfNeeded#>

/// Объект содержаний логику отображения данных
final class {{ module_info.name }}ViewController: UIViewController, ModuleLifeCycleOwner {

    // MARK: - Injected properties
    var router: {{ module_info.name. }}RoutingLogic!
    var provider: {{ module_info.name }}ProvisionLogic!

    // MARK: - Injected Renderers
    var renderer: {{ module_info.name }}Renderer!

    /// состояние модуля `{{ module_info.name }}`
    private var state = {{ module_info.name }}ModuleState()

    // MARK: - Lifecycle
    var lifeCycle: [ModuleLifeCycle] { [renderer] }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        moduleDidLoad()
        
        view.addSubview(renderer)
        NSLayoutConstraint.activate([
            renderer.topAnchor.constraint(equalTo: view.topAnchor),
            renderer.bottomAnchor.constraint(equalTo: view.bottomAnchor),
            renderer.leadingAnchor.constraint(equalTo: view.leadingAnchor),
            renderer.trailingAnchor.constraint(equalTo: view.trailingAnchor)
        ])
    }
    
    override func viewDidLayoutSubviews() {
        super.viewDidLayoutSubviews()
        moduleLayoutSubviews()
    }
    
    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
        moduleDidBecomeActive()
    }
    
    override func viewDidDisappear(_ animated: Bool) {
        super.viewDidDisappear(animated)
        moduleDidResignActive()
    }
}

// MARK: - {{ module_info.name }} + Initializer
extension {{ module_info.name }}ViewController: AnyModuleInitializer {
    
    func set<StateType>(initialState: StateType) where StateType: ModuleInitialState {
        state.initialState = initialState.is({{ module_info.name }}ModuleState.InitialStateType.self)
    }
}

// MARK: - {{ module_info.name }} + StateRepresentable
extension {{ module_info.name }}ViewController: {{ module_info.name }}ModuleStateRepresentable {
    
    var readOnly: {{ module_info.name }}ModuleReadOnlyState {
    	state
    }
}

// MARK: - {{ module_info.name }} + RenderingLogic
extension {{ module_info.name }}ViewController: {{ module_info.name }}RenderingLogic {}

// MARK: - {{ module_info.name }} + UserInteraction
extension {{ module_info.name }}ViewController: {{ module_info.name }}UserInteraction {}

#if DEBUG
// MARK: - Preview
#Preview(String(describing: {{ module_info.name }}Module.self)) {
    {{ module_info.name }}Module.Builder().build().node
}
#endif
